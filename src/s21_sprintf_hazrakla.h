// Спецификаторы: c, d, i, f, s, u, %
    // c - Символ, 
    // d - Знаковое десятичное целое число, 
    // i - Знаковое десятичное целое число,
    // f - Десятичное число с плавающей точкой,
    // s - Строка символов,
    // u - Беззнаковое десятичное целое число,
    // % - Символ %;
// Флаги: -, +, (пробел)
    // -
    // Выравнивание по левому краю в пределах заданной ширины поля; 
    // Выравнивание по правому краю используется по умолчанию (см. подспецификатор ширины).

    // +
    // Заставляет явно указывать знак плюс или минус (+ или -) даже для положительных чисел.
    // По умолчанию только отрицательным числам предшествует знак "-".

    // (пробел)
    // Если знак не будет выведен, перед значением вставляется пробел.
// Ширина: (число)
    // (число)
    // Минимальное количество печатаемых символов. 
    // Если выводимое значение короче этого числа, результат дополняется пробелами. 
    // Значение не усекается, даже если результат больше.
// Точность: .(число)
    //c	Точность не применяется.	Символ выводится.

// Длина: h, l
    // h
    // Аргумент интерпретируется как короткое int или короткое int без знака
    //  (применяется только к целочисленным спецификаторам: i, d, o, u, x и X).

    // l
    // Аргумент интерпретируется как длинное int или длинное int без знака 
    // для целочисленных спецификаторов (i, d, o, u, x и X) и как широкий символ 
    // или строка широких символов для спецификаторов c и s.

//%[флаги][ширина][.точность][длина]спецификатор
enum specificator
{
    unknown_spec,
    d_spec, // сделали полностью
    i_spec, // сделали полностью, аналогично d
    f_spec,
    c_spec, // широкие символы?
    s_spec, // строка широких символов
    u_spec, // сделали полностью
    percent_spec // сделали полностью
};

enum length {
    unknown_len,
    h_len,
    l_len
};

struct format {
    // флаги
    int plus; 
    int minus;
    int space;
    //ширина
    int width;
    //точность
    int precision;
    //длина
    enum length length;
    //спецификатор
    enum specificator spec;
};
